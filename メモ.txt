●再レンダリングされるのはどんな時？
①stateが更新されたコンポーネントは際レンダリング
②propsが変更されたコンポーネントは際レンダリング（子コンポーネント）
③デフォルトでReactは再レンダリングされたコンポーネントの子要素は全て再レンダリングされる
→よってコンポーネントわけが重要（コンポーネントわけすることで、再レンダリングされる場所を制御できる）

●memoについて
・親のコンポーネントが再レンダリングされても、propsに変更がない限りは子コンポーネントを再レンダリングしないようにできる
→memo(アロー関数)
→propsが変更されない限り際レンダリングされない
→親の再レンダリングに伴って不要な再レンダリングを起こさないためのもの
基本的にはコンポーネントはmemoで囲ってあげると良い◎
memo化する時のコストとは言われるので、一番小さいい粒度のコンポーネントまでは不要だが、
複数の要素から成り立っているコンポーネントや、今後肥大化が予想されるコンポーネントには付与する

●useCallBackについて
処理が変わらない関数を使いまわしますよというもの。
const 関数名 useCallback(() => , [見張る値])
見張っている値が変わった時にuseCallBackを再生成する
みはる値の部分をからの配列にすると、最初に生成したものをずっと使うという選択になる

・アロー関数で書いた関数は毎回新しい関数を生成していると判断される。
→中でやることは毎回一緒なのに、propsとしては違う関数として判断されてしまう（propsが変わった判定される）
→処理が変わらない場合（何かの処理が走ったら全く同じレスポンスが帰ってくる場合）使い回すと明示する必要がある

コンポーネントのmemo化と関数のmemo化は際レンダリングの上で必要
変数のメモ化もある

●InlineStyle
ReactでデフォルトであるCSS
style={}とかく
注意点
①適用する値は文字列で囲う
②CSSで-がついているものは、キャメルケースとしてつなぎ目を大文字で書き換える必要がある
// useStylesっぽい

●CSSモジュールとは
コンポーネントファイルに対応する形でCSSファイルを用意して、それを読み込んでコンポーネントないで使うもの
ファイル名.module.scssでファイルを作成、キャメルケースやダブルクォーテーションを使わないCSSを記述
→importしてclassNameで使用できる
純粋なCSSであるため、さまざまな擬似要素が使える（例：hover）
CSSに馴染みがあれば使いやすい
class名はimportした要素にしか関係しないため、他のコンポーネンで同じ名前を使っても競合しない

●CSSinJS(styled-jsx)
javascriptのなかに効率よくCSSを書いていくライブラリのこと
Style-jsxはReactのフレームワークであるnextjsにデフォルトで入っている
ホバーが使えない（さすがない）

●styled  omponentsについて
CSSinJSの中でも根強い人気があり、今でも人気上位のライブラリとなっている。
Styleを当てたコンポーネントなのか、他からインポートしたコンポーネントなのかわからなくなってしまうため注意
ホバーが使える（さすがある）

●emotion
emotionは非常に色々なスタイルの当て方がある
→認識合わせや一貫性を持たせる必要がある

他にもテールウィンドCSS、CSSFW€,チャクラUIなど色々CSSを当てる方法がある。

Reactでの画面遷移
→React.router
SPAじゃないシステムでは、静的なHTMLをサーバで持っていた（パスにマッチする）
SPAではJSで表示するため、ルーティングの設定をしないと初期ページに戻ってしまう
・BrowserRouterこのタグで囲ったものの中でルーティングを有効にする
・Linkはaタグみたいなもので、簡単にページ遷移ができるようになる\
・Switchのなかにどのパスでどのコンポーネントを表示するか書いていく

exactをtrueにすると、完全一致にしたものを対象にするかどうかという設定。
もしRouten/にexactを設定しない場合、ルートディレクトリ以下の全てのパスが対象になってしまう。。。

console.logにpropsを入れると、propsの中身を見れる。
掘り下げて利用できる{ 値 : {さらにネストされた値}}

{`${変数}`}
で文字列プラス変数が使える（バックシングルクウォート）
->2つ横並びにしても使える

URLパラメータとは
固定の文字列の表示ではく値を渡せる
pathの部分にコロンを記述することで、URLパラメータとして扱える

queryパラメータについて

pathnameのところにstateを配置できる（無駄なAPIアクセスを防げる）

history.goBack();
→遷移もとページに戻れる関数

●AtomicDisign
コンポーネント分割
・BradFrostが考案したデザインシステム
・画面要素を５段階に分けて組み合わせることでUIを実現
・コンポーネント化された要素が画面を構成しているという考え方
・React,Vue用ではない（よく用いられるが・・・）
・モダンJSと相性が良い

●５段階のコンポーネントについて
Atomic→原始的な
1.原子
→最も小さくてそれ以上分解できない要素を表す
（テキストボックスやボタン、アイコンなど）
2.分子
→Atomの組み合わせで意味を持つデザインパーツ
（アイコン＋メニュー、プロフィール画像＋テキストボックス、アイコンセット）
3.有機体
→AtomやMoleculeの組み合わせで構成される単体である程度の意味を持つ要素群
（ツイート入力エリア、サイドメニュー、１つのツイートエリア）
4.テンプレート
→ページのレイアウトのみを表現する要素（実データはもたない。）
（サイドメニューとツイートエリアとトピックエリアなど有機体を組み合わせたコンポーネント）
5.ページ
→小さいコンポーネントを組み合わせて最終的にページにする
（テンプレートに取得してきたデータを流し込む）

このコンポーネントの役割はなんなのか？を意識する必要がある。

unsplash -> 無料のフリー素材を取得できる

レイアウトの調整は呼ぶ側の責務にすると良い
